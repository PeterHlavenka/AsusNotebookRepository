<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mediaresearch.Framework.Utilities</name>
    </assembly>
    <members>
        <member name="T:Mediaresearch.Framework.Utilities.Authentication.XMLPathInfoProvider">
            <summary>
            XMLPathInfoProvider je tu protoze se mi zatim nechce delat nova tabulka do db. Az ji nekdo udela, implementujte prosim metody DatabasePathInfoProvider.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Calendar.HolidaysHelper.EasterDay(System.Int32)">
            <summary>
            Vraci velikonocni nedeli pro dany rok
            </summary>
            <param name="year">Rok</param>
            <returns>Pulnoc velikonocni nedele</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ConnectionStringFormatter.FormatConnectionString(System.String)">
            <summary>
            Vysosej server a db z ConnStringu EntityFrameworku
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.DateTimeFormat.DateTimeFormatHelper">
            <summary>
            Pomocna trida pro nastaveni formatu datumu
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.DateTimeFormat.DateTimeFormatHelper.DateFormat">
            <summary>
            Format datumu
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.DateTimeFormat.DateTimeFormatHelper.FullDateTimeFormat">
            <summary>
            Format datumu s casem ve formatu d. MMMM yyyy HH:mm:ss
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.DateTimeFormat.DateTimeFormatHelper.ShortDateTimeFormat">
            <summary>
            Format datumu s casem ve formatu yyyy.mm.dd HH:mm
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.DateTimeFormat.DateTimeFormatHelper.MilisecondDateTimeFormat">
            <summary>
            Format datumu s casem ve formatu dd.MM.yyyy HH:mm:ss.fff
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.DateTimeHelper.GetProductionDate(System.DateTime,System.TimeSpan)">
            <summary>
            Vraci produkcni den pro dany cas
            </summary>
            <param name="date">datum, ktery chci zmenit na produkcni den</param>
            <param name="productionTime">cas produkce</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ExceptionExtension.GetFullExceptionMessage(System.Exception)">
            <summary>
            Vrati exception message vcetne vsech innerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Extensions.CollectionExtensions.AddItemToValueList``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            Pro kontrukce vnorenych kolekci v dictionary
            Prida prvek do vnoreneho listu.
            </summary>
            <typeparam name="TKey">Typ klice</typeparam>
            <typeparam name="TListItem">Typ prvku ve vlozene kolekci</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Klic</param>
            <param name="item">Prvek</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Extensions.CollectionExtensions.AddItemsToValueList``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Pro kontrukce vnorenych kolekci v dictionary
            Prida prveky do vnoreneho listu.
            </summary>
            <typeparam name="TKey">Typ klice</typeparam>
            <typeparam name="TListItem">Typ prvku ve vlozene kolekci</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Klic</param>
            <param name="items">Prvky</param>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.IO.IRemover">
            <summary>
            Rozhrani usnadnujici volani odmazani objektu (podle implementace)
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.IO.IoManager.CreateDirectory(System.String)">
            <summary>
            Vytvori slozku definovanou cestou path. POZOR - navratova hodnota nesouvisi s uspesnym vytvorenim slozky - tato metoda nezachycuje vyjimky
            </summary>
            <param name="path">vytvorena slozka bude mit cestu path</param>
            <returns>pravda, pokud jiz slozka exitovala, jinak nepravda</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.IO.IoManager.DeleteAllFilesInDirectory(System.String)">
            <summary>
            Smaze vsechny soubory ve slozce directoryPath
            </summary>
            <param name="directoryPath">cesta ke slozce</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.IO.IoManager.DeleteDirectory(System.String)">
            <summary>
            Smaze vsechny soubory a podslozky i se soubory!
            </summary>
            <param name="directoryPath">cesta ke slozce</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.IO.IoManager.GetFileAbsolutePath(System.String)">
            <summary>
             Ziska z relativni ci absolutni cesty absolutni cestu.
            </summary>
            <param name="path">Relativni nebo absolutni cesta</param>
            <returns>Absolutni cestu nebo null, pokud soubor nemuze byt nalezen jak na absolutni ceste, tak relativni</returns>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.CRCComputer">
            <summary>
            Poskytuje metody pro vypocet vsech standartnich typu CRC
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC16(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Vraci CRC 16 z predanych dat. Initial value = 0xFFFF, polynom x^16 + x^15 + x^2 + 1 (0xA001)
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <returns>CRC 16</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC16(System.Collections.Generic.IEnumerable{System.Byte},System.UInt16,System.UInt16)">
            <summary>
            Vraci CRC 16 z predanych dat.
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <param name="initialValue">pocatecni hodnota CRC</param>
            <param name="polynom">polynom</param>
            <returns>CRC 16</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC_CCITT(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Vraci CRC CCITT z predanych dat. Initial value = 0xFFFF, polynom = x^16 + x^12 + x^5 + 1 (0x8408)
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <returns>CRC 16</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC_CCITT(System.Collections.Generic.IEnumerable{System.Byte},System.UInt16)">
            <summary>
            Vraci CRC CCITT z predanych dat, polynom = x^16 + x^12 + x^5 + 1 (0x8408)
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <param name="initialValue">pocatecni hodnota CRC</param>
            <returns>CRC CCITT</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC8(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Vraci CRC 8 z predanych dat. Initial value = 0x00, polynom x^8 + x^5 + x^4 + 1 (0x8C)
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <returns>CRC 8</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC8(System.Collections.Generic.IEnumerable{System.Byte},System.Byte,System.Byte)">
            <summary>
            Vraci CRC 8 z predanych dat.
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <param name="initialValue">pocatecni hodnota CRC</param>
            <param name="polynom">polynom</param>
            <returns>CRC 8</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC_XMODEM(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Vraci CRC XMODEM z predanych dat. Initial value = 0x00, polynom x^16 + x^12 + x^5 + 1 (0x1021)
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <returns>CRC XMODEM</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.CRCComputer.ComputeCRC_XMODEM(System.Collections.Generic.IEnumerable{System.Byte},System.UInt16,System.UInt16)">
            <summary>
            Vraci CRC XMODEM z predanych dat.
            </summary>
            <param name="data">data pro vypocet CRC</param>
            <param name="initialValue">pocatecni hodnota CRC</param>
            <param name="polynom">polynom</param>
            <returns>CRC XMODEM</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.MathUtils.MathUtils.RoundNumberToFiveMultiple(System.Int32)">
            <summary>
            zaokrouhli cislo, pokud je o jedna mensi nebo o jedna vetsi nez nasobek peti a neni to 1 na nejblizsi nasobek peti
            </summary>
            <param name="number">jakykoliv integer</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.MathUtils.MathUtils.Truncate(System.Decimal,System.Int32)">
            <summary>
            Truncate decimalu (ne round).
            Truncate(-0.89, 1)      => -0.8
            Truncate(1234.89, -1)   => 1230
            </summary>
            <param name="precision">Kladné číslo určuje počet míst za desetinou čárkou, záporné počet míst před desetinou čárkou.</param>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.MultiThreadedObjectsObserverBase`1">
            <summary>
            Vice threadovy observer. V konstuktoru predane mnozstvi threadu bude zpracovavat objekty ve fronte.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.IRange`2.Gap(Mediaresearch.Framework.Utilities.RangeBase{`0,`1})">
            <summary>
            Vrati interval mezi intervaly. V pripade, ze existuje prunik, vrati prazdny interval.
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.MultiThreadedObjectsObserverWithSortedListBase`1">
            <summary>
            Vice threadovy observer s razenim zpracovavanych polozek (napr. dle priority). V konstuktoru predane mnozstvi threadu bude zpracovavat objekty ve fronte.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NameHelper.ReplaceStreetName(System.String,System.String)">
            <summary>
            Metoda nahrazuje nazev ulice v textu, ktery tvori nazev ulice a cislo popisne.
            </summary>
            <param name="streetAndNumber">nazev ulice s cislem</param>
            <param name="newStreet">novy nazev ulice</param>
            <returns></returns>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.Net.INetworkInterface">
            <summary>
            Je tu proto, aby se dalo lepe testovat (jinak by se samozrejme dalo pouzit primo <see cref="T:System.Net.NetworkInformation.NetworkInterface"/>
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.Net.IpAddressExtensions">
            <summary>
            Prevzato z http://blogs.msdn.com/b/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
             + pridany vlastni metody
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Net.IpAddressExtensions.GetInterNetworkIpAddresses(Mediaresearch.Framework.Utilities.Net.INetworkInterface)">
            <summary>
            Je tu kvuli testum - normalne by se melo pouzivate jen <see cref="M:Mediaresearch.Framework.Utilities.Net.IpAddressExtensions.GetInterNetworkIpAddresses"/>
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ProcessControl.IProcessGuardian.KillAllProcess(System.String[])">
            <summary>
            Pokusi se najit vsechny procesy v argumentu a zabije je
            </summary>
            <param name="fullNames">Procesy s plnym nazvem - cesta a nazev spusteneho souboru</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.BinaryFormatterHelper.Serialize``1(``0[])">
            <summary>
            Serializuje pole objektu T na pole bytu.
            </summary>
            <typeparam name="T">Libovolny object nebo struktura oznaceny atributem serializable</typeparam>
            <param name="array">Pole objekty T k serializaci</param>
            <returns>serializovana data</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.BinaryFormatterHelper.Deserialize``1(System.Byte[])">
            <summary>
            Deserializuje z pole bytu pole objektu T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.ArgumentType">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.LastOccurenceWins">
            <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.ArgumentType.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.ArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ArgumentAttribute.#ctor(Mediaresearch.Framework.Utilities.ArgumentType)">
            <summary>
            Allows control of command line parsing.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.Type">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.DefaultShortName">
            <summary>
            Returns true if the argument did not have an explicit short name specified.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.ShortName">
            <summary>
            The short name of the argument.
            Set to null means use the default short name if it does not
            conflict with any other parameter name.
            Set to String.Empty for no short name.
            This property should not be set for DefaultArgumentAttributes.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.DefaultLongName">
            <summary>
            Returns true if the argument did not have an explicit long name specified.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.LongName">
            <summary>
            The long name of the argument.
            Set to null means use the default long name.
            The long name for every argument must be unique.
            It is an error to specify a long name of String.Empty.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.DefaultValue">
            <summary>
            The default value of the argument.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.HasDefaultValue">
            <summary>
            Returns true if the argument has a default value.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.HasHelpText">
            <summary>
            Returns true if the argument has help text specified.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ArgumentAttribute.HelpText">
            <summary>
            The help text for the argument.
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.DefaultArgumentAttribute">
            <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            The ShortName property should not be set for DefaultArgumentAttribute
            instances. The LongName property is used for usage text only and
            does not affect the usage of the argument.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.DefaultArgumentAttribute.#ctor(Mediaresearch.Framework.Utilities.ArgumentType)">
            <summary>
            Indicates that this argument is the default argument.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.Parser">
             <summary>
             Parser for command line arguments.
            
             The parser specification is infered from the instance fields of the object
             specified as the destination of the parse.
             Valid argument types are: int, uint, string, bool, enums
             Also argument types of Array of the above types are also valid.
             
             Error checking options can be controlled by adding a ArgumentAttribute
             to the instance fields of the destination object.
            
             At most one field may be marked with the DefaultArgumentAttribute
             indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            
             If not specified then the parser will infer default options for parsing each
             instance field. The default long name of the argument is the field name. The
             default short name is the first character of the long name. Long names and explicitly
             specified short names must be unique. Default short names will be used provided that
             the default short name does not conflict with a long name or an explicitly
             specified short name.
            
             Arguments which are array types are collection arguments. Collection
             arguments can be specified multiple times.
             </summary>
        </member>
        <member name="F:Mediaresearch.Framework.Utilities.Parser.NewLine">
            <summary>
            The System Defined new line string.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.#ctor">
            <summary>
            Don't ever call this.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ParseArgumentsWithUsage(System.String[],System.Object)">
            <summary>
            Parses Command Line Arguments. Displays usage message to Console.Out
            if /?, /help or invalid arguments are encounterd.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ParseArguments(System.String[],System.Object,Mediaresearch.Framework.Utilities.ErrorReporter)">
            <summary>
            Parses Command Line Arguments. 
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <param name="reporter"> The destination for parse errors. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ParseHelp(System.String[])">
            <summary>
            Checks if a set of arguments asks for help.
            </summary>
            <param name="args"> Args to check for help. </param>
            <returns> Returns true if args contains /? or /help. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ArgumentsUsage(System.Type)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            Formats the output to the width of the current console window.
            </summary>
            <param name="argumentType"> The type of the arguments to display usage for. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ArgumentsUsage(System.Type,System.Int32)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="argumentType"> The type of the arguments to display usage for. </param>
            <param name="columns"> The number of columns to format the output to. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.GetConsoleWindowWidth">
            <summary>
            Returns the number of columns in the current console window
            </summary>
            <returns>Returns the number of columns in the current console window</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Searches a StringBuilder for a character
            </summary>
            <param name="text"> The text to search. </param>
            <param name="value"> The character value to search for. </param>
            <param name="startIndex"> The index to stat searching at. </param>
            <returns> The index of the first occurence of value or -1 if it is not found. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.LastIndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Searches a StringBuilder for a character in reverse
            </summary>
            <param name="text"> The text to search. </param>
            <param name="value"> The character to search for. </param>
            <param name="startIndex"> The index to start the search at. </param>
            <returns>The index of the last occurence of value in text or -1 if it is not found. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.#ctor(System.Type,Mediaresearch.Framework.Utilities.ErrorReporter)">
            <summary>
            Creates a new command line argument parser.
            </summary>
            <param name="argumentSpecification"> The type of object to  parse. </param>
            <param name="reporter"> The destination for parse errors. </param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.ParseArgumentList(System.String[],System.Object)">
            <summary>
            Parses an argument list into an object
            </summary>
            <param name="args"></param>
            <param name="destination"></param>
            <returns> true if an error occurred </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.Parse(System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args"> The arguments to parse. </param>
            <param name="destination"> The destination of the parsed arguments. </param>
            <returns> true if no parse errors were encountered. </returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Parser.GetUsageString(System.Int32)">
            <summary>
            A user firendly usage string describing the command line argument syntax.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Parser.HasDefaultArgument">
            <summary>
            Does this parser have a default argument.
            </summary>
            <value> Does this parser have a default argument. </value>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.Exceptions">
            <summary>
            Provides static methods for throwing common exceptions.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentRank(System.Array,System.String,System.Int32)">
            <summary>
            Throws <see cref="T:System.RankException"/> if an array argument
            <paramref name="value"/> named <paramref name="name"/> does not have
            the number of dimensions specified by <paramref name="rank"/>.
            </summary>
            <param name="value">The value of the array argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="rank">The expected number of dimensions.</param>
            <exception cref="T:System.RankException">Thrown if <paramref name="value"/>
            does not have the number of dimensions specified by
            <paramref name="rank"/>.</exception>
            <example>
            The following example shows how to use
            <see cref="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentRank(System.Array,System.String,System.Int32)"/> to implement argument validation
            in a static method.
            <code>
            using System;
            
            
            public class MyArrayUtils
            {
                public static int BinarySearch(Array array, object value)
                {
                    Exceptions.ThrowIfNull(array, "array");
                    Exceptions.ThrowIfDifferentRank(array, "array", 1);
                    
                    // Implement search logic here.
                }
                
                
                private MyArrayUtils()
                {
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentRank(System.Array,System.Int32)">
            <summary>
            Throws <see cref="T:System.RankException"/> if an array argument
            <paramref name="value"/> does not have the number of dimensions
            specified by <paramref name="rank"/>.
            </summary>
            <param name="value">The value of the array argument.</param>
            <param name="rank">The expected number of dimensions.</param>
            <exception cref="T:System.RankException">Thrown if <paramref name="value"/>
            does not have the number of dimensions specified by
            <paramref name="rank"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentType(System.Object,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if an argument
            <paramref name="value"/> named <paramref name="name"/> is not an
            instance of <paramref name="type"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="type">The expected <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="value"/> is not an instance of
            <paramref name="type"/>.</exception>
            <remarks>This method is useful in implementing
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</remarks>
            <example>
            The following example shows how to use
            <see cref="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentType(System.Object,System.String,System.Type)"/> to simplify an implementation of
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            <code>
            using System;
            
            
            public class MyClass : IComparable
            {
                public MyClass()
                {
                }
                
                
                public int CompareTo(object obj)
                {
                    if (obj == null)
                        return 1;
                    
                    Exceptions.ThrowIfDifferentType(obj, "obj", this.GetType());
                    
                    // Implement CompareTo() logic here.
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfDifferentType(System.Object,System.Type)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if an argument
            <paramref name="value"/> is not an instance of
            <paramref name="type"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="type">The expected <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="value"/> is not an instance of
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfIncompatibleType(System.Object,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if an argument
            <paramref name="value"/> named <paramref name="name"/> cannot be
            cast to <paramref name="type"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="type">The expected <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="value"/> cannot be cast to
            <paramref name="type"/>.</exception>
            <remarks>This method is useful in overloading the protected methods
            of <see cref="T:System.Collections.CollectionBase"/>.</remarks>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfIncompatibleType(object,string,Type)ThrowIfIncompatibleType</cref>
            </see> to simplify extending
            <see cref="T:System.Collections.CollectionBase"/>.
            <code>
            using System;
            
            
            public class TimeZoneCollection : CollectionBase
            {
                public TimeZoneCollection() : base()
                {
                }
                
                
                public TimeZone this[int index]
                {
                    get { return (TimeZone)this.List[index]; }
                    
                    set { this.List[index] = value; }
                }
                
                
                public int Add(TimeZone value)
                {
                    return this.List.Add(value);
                }
                
                public int IndexOf(TimeZone value)
                {
                    return this.List.IndexOf(value);
                }
                
                protected override void OnValidate(object value)
                {
                    base.OnValidate(value);
                    
                    Exceptions.ThrowIfIncompatibleType(value, "value",
                     typeof(TimeZone));
                }
                
                public void Remove(TimeZone value)
                {
                    this.List.Remove(value);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfIncompatibleType(System.Object,System.Type)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if an argument
            <paramref name="value"/> cannot be cast to <paramref name="type"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="type">The expected <see cref="T:System.Type"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="value"/> cannot be cast to
            <paramref name="type"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int32,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see cref="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int32,System.String,System.Type)"/> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value",
                     typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int32,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see cref="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int32,System.Type)"/> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.String,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.String"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not the name of a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a name equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see cref="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.String,System.String,System.Type)"/> to implement argument
            validation in a method.
            <code>
            using System;
            
            
            public class MyClass
            {
                public static MyEnum ValueForString(string value)
                {
                    Exceptions.ThrowIfNull(value, "value");
                    Exceptions.ThrowIfInvalidEnumValue(value, "value",
                     typeof(MyEnum));
                    
                    return (MyEnum)Enum.Parse(typeof(MyEnum), value);
                }
                
                
                private MyClass()
                {
                }
            }
            
            
            public enum MyEnum
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.String"/> argument <paramref name="value"/> is not the
            name of a constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a name equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public string MyPropertyName
                {
                    get { return Enum.Format(typeof(MyEnum), this.myProperty, "G"); }
                    
                    set
                    {
                        Exceptions.ThrowIfNull(value);
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = (MyEnum)Enum.Parse(typeof(MyEnum), value);
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Byte,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : byte
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Byte,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : byte
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int16,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : short
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int16,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : short
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int64,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : long
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.Int64,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : long
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt32,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : uint
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt32,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : uint
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.SByte,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : sbyte
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.SByte,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : sbyte
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt16,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : ushort
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt16,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : ushort
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt64,System.String,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is not a constant in
            <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(MyEnum value)
                {
                    Exceptions.ThrowIfInvalidEnumValue(value, "value", typeof(MyEnum));
                }
            }
            
            
            public enum MyEnum : ulong
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfInvalidEnumValue(System.UInt64,System.Type)">
            <summary>
            Throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> is not a
            constant in <paramref name="enumType"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="enumType">An enumeration type.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if no constant
            in <paramref name="enumType"/> has a value equal to
            <paramref name="value"/>.</exception>
            <example>
            The following example shows how to use
            <see>
            	<cref>ThrowIfInvalidEnumValue</cref>
            </see> to implement argument
            validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public MyEnum MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfInvalidEnumValue(value, typeof(MyEnum));
                        
                        this.myProperty = value;
                    }
                }
                
                
                private MyEnum myProperty = MyEnum.MyValue1;
            }
            
            
            public enum MyEnum : ulong
            {
                MyValue1,
                MyValue2
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if an argument
            <paramref name="value"/> named <paramref name="name"/> is a null
            reference (<c>Nothing</c> in Visual Basic).
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="value"/> is a null reference (<c>Nothing</c> in
            Visual Basic).</exception>
            <example>
            The following example shows how to use <see>
                                                   	<cref>ThrowIfNull</cref>
                                                   </see> to
            implement argument validation in a constructor.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass(string value)
                {
                    Exceptions.ThrowIfNull(value, "value");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfNull(System.Object)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if an argument
            <paramref name="value"/> is a null reference (<c>Nothing</c> in
            Visual Basic).
            </summary>
            <param name="value">The value of the argument.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="value"/> is a null reference (<c>Nothing</c> in
            Visual Basic).</exception>
            <example>
            The following example shows how to use <see>
                                                   	<cref>ThrowIfNull</cref>
                                                   </see> to
            implement argument validation in a property.
            <code>
            using System;
            
            
            public class MyClass
            {
                public MyClass()
                {
                }
                
                
                public string MyProperty
                {
                    get { return this.myProperty; }
                    
                    set
                    {
                        Exceptions.ThrowIfNull(value);
                        
                        this.myProperty = value;
                    }
                }
                
                
                private string myProperty = string.Empty;
            }
            </code>
            </example>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Byte,System.String,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Byte,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Char,System.String,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Char,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Double,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Single,System.String,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Single,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int16,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.SByte,System.String,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.SByte,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRange(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Byte,System.String,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Byte,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Char,System.String,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Char,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Double,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Single,System.String,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Single,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int16,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.SByte,System.String,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.SByte,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeExclusive(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than or equal
            to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than or equal to
            <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Byte,System.String,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Byte,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Char,System.String,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Char,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Double,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Single,System.String,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Single,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int16,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> is less than or
            equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.SByte,System.String,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.SByte,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMax(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> is less than
            or equal to <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="lowerBound">The lower bound (exclusive) of
            <paramref name="value"/>.</param>
            <param name="maxValue">The maximum value (inclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than or equal to
            <paramref name="lowerBound"/> or greater than
            <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int32"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Byte,System.String,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Byte,System.Byte,System.Byte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Byte"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Char,System.String,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Char,System.Char,System.Char)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Char"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Decimal,System.String,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Decimal"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Double,System.Double,System.Double)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Double"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Single,System.String,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Single,System.Single,System.Single)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.Single"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int16,System.Int16,System.Int16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int16"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.Int64,System.Int64,System.Int64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.Int64"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt32"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.SByte,System.String,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.SByte,System.SByte,System.SByte)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if an
            <see cref="T:System.SByte"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt16,System.String,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt16"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt64,System.String,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> named
            <paramref name="name"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.Exceptions.ThrowIfOutOfRangeIncludeMin(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if a
            <see cref="T:System.UInt64"/> argument <paramref name="value"/> is less than
            <paramref name="minValue"/> or greater than or equal to
            <paramref name="upperBound"/>.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="minValue">The minimum value (inclusive) of
            <paramref name="value"/>.</param>
            <param name="upperBound">The upper bound (exclusive) of
            <paramref name="value"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <paramref name="value"/> is less than <paramref name="minValue"/> or
            greater than or equal to <paramref name="upperBound"/>.</exception>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.NumericalSystemConverter">
            <summary> 
            Summary description for NumericalSystemConverter.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetNumberOnPosition(System.Int32,System.Byte)">
            <summary>
            Vraci cast cisla na urcene pozici zprava. Napr: z 123456 pozice 2 vraci cislo 5
            </summary>
            <param name="number"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.DecToHex(System.Int32)">
            <summary>
            Dekadicke cislo prevede na hexa reprezentaci
            </summary>
            <param name="numByte"></param>
            <returns>Textova reprezentace vstupniho parametru v sestnactkove soustave</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.NumToDec(System.String,System.Byte)">
            <summary>
            Prevadi string zadane vstupni soustavy na int
            </summary>
            <param name="numString"></param>
            <param name="inputNumberSystem">Vstupni číselná soustava. Možné hodnoty 2,10,16</param>
            <returns>Návratová hodnota číslo typu INT</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.HexToBin(System.String)">
            <summary>
            Ze vstupního Hexa řetezce vrací BIN řetezec 
            </summary>
            <param name="numString">řetězec predstavujici hexa cislo. možný je formát s i bez prefixu(0x)</param>
            <returns>řetězec obsahujici binarni reprezentaci parametru</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.IntToBin(System.Int32,System.Byte)">
            <summary>
            Ze vstupniho cisla int vraci binarni reprezentaci. Druhy parametr udava delku Bin retezce
            </summary>
            <param name="num"></param>
            <param name="binaryLength"></param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetIntFromBCDFormat(System.Int32)">
            <summary>
            Konvertuje int v BCD formatu na int.
            </summary>
            <param name="num">Cislo v BCD formatu</param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.ConvertToBCDFormat(System.Int32)">
            <summary>
            Konvertuje cislo do BCD formatu
            </summary>
            <param name="num"></param>
            <returns>Cislo ve formatu BCD</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetIntFromHighAndLowByte(System.Byte,System.Byte)">
            <summary>
            Vraci int vytvoreny s bytu. (low endian)
            </summary>
            <param name="highByte"></param>
            <param name="lowByte"></param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetArrayFromHexaString(System.String)">
            <summary>
            Prevede hexa retezec na pole bytu, za predpokladu, ze kazdy byte v retezci
            reprezentuji dva znaky (cisla mensi nez 0x10 musi mit tvar 00)
            </summary>
            <param name="hexaString">Vstupni hexa retezec</param>
            <returns>Pole bytu vytvorene ze vstupniho hexa retezce</returns>
            <exception cref="T:System.ArgumentException">Pokud delka retezce neni delitelna dvema nebo v pripade
            ze nektery znak v retezci neodpovida hexa ciselne reprezentaci</exception>
            <exception cref="T:System.ArgumentNullException">Pokud je vstupni retezec null nebo emty</exception>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetHexaStringFromArray(System.Byte[])">
            <summary>
            Vraci textovou reprezentaci pole bytu. Na kazdy byte v poli pripadaji dva znaky.
            </summary>
            <param name="data">pole bytu pro prevod na retezec</param>
            <returns>Textova hexa reprezentace pole bytu bez hex prefixu a oddelovace</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetHexaStringFromArray(System.Byte[],System.String)">
            <summary>
            Vraci textovou reprezentaci pole bytu. Na kazdy byte v poli pripadaji dva znaky.
            Mezi jednotliva cisla vlozi oddelovac predany v argumentu.
            </summary>
            <param name="data">pole bytu pro prevod na retezec</param>
            <param name="separator">Oddelovac mezi jednotlivymi cisly</param>
            <returns>Textova hexa reprezentace pole bytu bez hex prefixu a oddelovace</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.SepareteBytesOnNumericString(System.String,System.Byte,System.String)">
            <summary>
            Mezi jednotlive znaky retezce vlozi separator.
            </summary>
            <param name="data">Vstupni retezec</param>
            <param name="countOfBytesBetweenSeparate">Pocet znaku mezi ktere bude vlozen separetor</param>
            <param name="separator">Oddelovac</param>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetBit(System.Byte,System.Byte)">
            <summary>
            Vrací true pokud je požadovaný bit 1
            </summary>
            <param name="inputBitMask">Vstupní bitová maska ve tvaru byte</param>
            <param name="requiredBit">Požadovaný bit v bitové masce indexovany od nuly (0 = prvni bit z prava)</param>
            <returns>Vrací true pokud požadovaný bit=1</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetBitPositionFromNumber(System.Int32)">
            <summary>
            Vraci pozici bitu z bitove masky.
            </summary>
            <param name="number">Vstupni bitova maska</param>
            <returns>Pozice v bitove masce indexovana od jednicky</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetCountOfSetBits(System.Byte)">
            <summary>
            Spočítá počet nastavených bitů
            </summary>
            <param name="value">Vstupní byte hodnota</param>
            <returns>Počet nastavených bitů</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetCountOfSetBits(System.Int32)">
            <summary>
            Spočítá počet nastavených bitů
            </summary>
            <param name="value">Vstupní int hodnota</param>
            <returns>Počet nastavených bitů</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetCountOfSetBits(System.Int64)">
            <summary>
            Spočítá počet nastavených bitů
            </summary>
            <param name="value">Vstupní long hodnota</param>
            <returns>Počet nastavených bitů</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.NumericalSystemConverter.GetCountOfSetBits(System.Collections.BitArray)">
            <summary>
            Spočítá počet nastavených bitů
            </summary>
            <param name="value">vstupní bitové pole</param>
            <returns>Počet nastavených bitů</returns>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.NewerVersion">
            <summary>
              Looks up a localized string similar to Novejší verze.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.NewerVersionExistsQuestion">
            <summary>
              Looks up a localized string similar to Existuje novější verze programu, přejete si ji nainstalovat?.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.NewerVersionsList">
            <summary>
              Looks up a localized string similar to Seznam novejších verzí:.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.NotSupportedVersion">
            <summary>
              Looks up a localized string similar to Nepodporovaná verze.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.Resources.Localisation.Localisation.NotSupportedVersionMessage">
            <summary>
              Looks up a localized string similar to Tato verze programu není podporována, nainstalujte si některou z podporovaných verzí:.
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.TemporalProperty`1">
            <summary>
            Implementace temporal property (viz http://martinfowler.com/ap2/temporalProperty.html )
            Temporal property je vlastnost entity (v nasem pripade je to vzdy jen a jen reference na jinou tridu, nikdy jen hodnotovy typ) ktera
            se meni s casem a zaroven je potreba znat jeji minule hodnoty v kazdem casovem okamziku....
            Temporal property musi mit vzdy hodnotu. Musi tedy platit ze From hodnoty musi byt rovno To hodnoty predchozi
            </summary>
            <typeparam name="T">Datovy typ predstavujici hodnotu vlastnosti.</typeparam>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1">
            <summary>
            Predek pro zpracovani prichozich dat v jinem threadu. Zarizuje neblokovani threadu dodavajiciho
            data od jejich dalsiho zpracovani. To je jiz ponechano na implementaci potomka.
            </summary>
            <typeparam name="T">Typ zpracovavanych dat</typeparam>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.#ctor(System.Boolean)">
            <summary>
            Vytvori instanci.
            </summary>
            <param name="runImmediately">Pokud true, vola se ihned metoda <see cref="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.StartWork"/> a 
            je nastartovan zpracovaci thread, jinak je nutne zavolat metodu rucne.</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.HandleReceivedObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Prijima data a vklada je do kolekce pro pozdejsi zpracovani. 
            </summary>
            <param name="objectForHandle">Typ zpracovavanych dat</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.StopWork">
            <summary>
            Zastavi zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.StartWork">
            <summary>
            Spusti zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.StartInternal">
            <summary>
            Nastartuje dafaultne jedenm thread, virtualni pro pripaden prekryti
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.HandleObject(`0)">
            <summary>
            Zpracovani dat je ponechana na implementaci potomka.
            </summary>
            <param name="objectForHandle"></param>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.WorkingThreadName">
            <summary>
            Jmeno zpracovavaciho threadu.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverBase`1.RunThreadAsBackground">
            <summary>
            <see cref="P:System.Threading.Thread.IsBackground"/>
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.HandleReceivedObjects(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Prijima data a vklada je do kolekce pro pozdejsi zpracovani. 
            </summary>
            <param name="objectForHandle">Typ zpracovavanych dat</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.GetItemComparer">
            <summary>
            Vraci IComparer pro nalezeni pozice pro novy item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.GetKeyComparer">
            <summary>
            Vraci IComparer pro nalezeni pozice pro novy item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.StopWork">
            <summary>
            Zastavi zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.StartWork">
            <summary>
            Spusti zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.StartInternal">
            <summary>
            Nastartuje dafaultne jeden thread, virtualni pro pripaden prekryti
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.HandleObject(System.Collections.Generic.List{`1})">
            <summary>
            Zpracovani dat je ponechana na implementaci potomka.
            </summary>
            <param name="objectForHandle"></param>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.WorkingThreadName">
            <summary>
            Jmeno zpracovavaciho threadu.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithGroupedSortedListBase`2.RunThreadAsBackground">
            <summary>
            <see cref="P:System.Threading.Thread.IsBackground"/>
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1">
            <summary>
            Predek pro zpracovani prichozich dat v jinem threadu. Zarizuje neblokovani threadu dodavajiciho
            data od jejich dalsiho zpracovani. To je jiz ponechano na implementaci potomka.
            Pridavane polozky se vkladaji do vnitrniho listu na pozici dle implementace ItemComparer.
            </summary>
            <typeparam name="T">Typ zpracovavanych dat</typeparam>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.#ctor(System.Boolean)">
            <summary>
            Vytvori instanci.
            </summary>
            <param name="runImmediately">Pokud true, vola se ihned metoda <see cref="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.StartWork"/> a 
            je nastartovan zpracovaci thread, jinak je nutne zavolat metodu rucne.</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.HandleReceivedObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Prijima data a vklada je do kolekce pro pozdejsi zpracovani. 
            </summary>
            <param name="objectForHandle">Typ zpracovavanych dat</param>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.GetItemComparer">
            <summary>
            Vraci IComparer pro nalezeni pozice pro novy item
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.StopWork">
            <summary>
            Zastavi zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.StartWork">
            <summary>
            Spusti zpracovavani dat.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.StartInternal">
            <summary>
            Nastartuje dafaultne jedenm thread, virtualni pro pripaden prekryti
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.HandleObject(`0)">
            <summary>
            Zpracovani dat je ponechana na implementaci potomka.
            </summary>
            <param name="objectForHandle"></param>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.WorkingThreadName">
            <summary>
            Jmeno zpracovavaciho threadu.
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.ThreadedObjectsObserverWithSortedListBase`1.RunThreadAsBackground">
            <summary>
            <see cref="P:System.Threading.Thread.IsBackground"/>
            </summary>
        </member>
        <member name="P:Mediaresearch.Framework.Utilities.VersionControl.IVersionController.LookForNewerVersions">
            <summary>
            Urci, zda se ma pri kontrole verze informovat o pripadnych novejsich verzich. Vychozi hodnota je true.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.VersionControl.IVersionController.CheckVersion">
            <summary>
            Metoda pretezujici <see cref="M:Mediaresearch.Framework.Utilities.VersionControl.IVersionController.CheckVersion(System.Boolean@)"/>. S out parametrem se neda poradne pracovat pri dispatchovani.
            </summary>
            <returns>prava, pokud je verze podporovana, jinak nepravda</returns>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.VersionControl.NavigateCommand.OnCanExecuteChanged">
            To avoid compiler warning...
        </member>
        <member name="T:Mediaresearch.Framework.Utilities.VersionControl.VersionDialogView">
            <summary>
            Interaction logic for VersionDialogView.xaml
            </summary>
            <summary>
            VersionDialogView
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.Utilities.VersionControl.VersionDialogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Mediaresearch.Framework.Domain.History.ValidityRange">
            <summary>
            Specialni uprava <see cref="T:Mediaresearch.Framework.Utilities.DataStructures.DateTimeRange"/> jez je vzdy otevrena zprava a uklada cas s presnosti na jednu vterinu.
            </summary>
        </member>
        <member name="M:Mediaresearch.Framework.DataBinding.SortableSearchableList`1.ToList">
            <summary>
            Vytvori z generickeho SortableSearchableList genericky List. 
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
