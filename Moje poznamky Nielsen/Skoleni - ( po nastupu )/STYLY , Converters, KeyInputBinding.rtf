{\rtf1\ansi\ansicpg1250\deff0\nouicompat\deflang1029{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Consolas;}{\f2\fnil\fcharset0 Consolas;}{\f3\fnil\fcharset238 Calibri;}{\f4\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs28\lang9\par

\pard\li1440\sa200\sl276\slmult1\b\fs48\tab\tab\tab\tab\tab\tab\tab\tab  \ul          \fs52 Styly        \par
\ulnone\b0\fs28\par

\pard\sa200\sl276\slmult1\fs32\tab\b\fs40 Vytvoreni Resources primo ve tride kde se bude pouzivat:\b0\fs32\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 Muzeme si pridat do tridy kde se opakuji nektere komponenty. Aby se nemuseli vsechny hodnoty psat znovu pridame si :\par

\pard\sa200\sl276\slmult1\tab   \cf1\f1\fs22 <\cf2 Window.Resources\cf1 >\cf0\f0   \fs28\par
\tab Sem se davaji sablony napr :       \par
\tab   \cf1\f1\fs22 <\cf2 Window.Resources\cf1 >\cf0\f0   \fs28\par
\tab     \cf1\f1\fs22 <\cf2 DataTemplate\cf3  x\cf1 :\cf3 Key\cf1 ="CheckColumntemplate">\cf4\par
            \cf1 <\cf2 CheckBox\cf3  IsChecked\cf1 ="\{\cf2 Binding\cf3  IsChecked\cf1 ,\cf3  UpdateSourceTrigger\cf1 =PropertyChanged\}"/>\cf4\par
        \cf1 </\cf2 DataTemplate\cf1 >\par
\f2\lang1033\tab\cf0\f0\fs28\lang9   \cf1\f1\fs22 <\f2\lang1033 /\cf2\f1\lang9 Window.Resources\cf1 >\cf0\f0   \par
\fs28\tab nebo napr:\par
\tab\cf4\f1\fs19  \cf1 <\cf2 UserControl.Resources\cf1 >\cf4\par
        \cf1 <\cf2 Style\cf3  TargetType\cf1 ="Button"\cf3  x\cf1 :\cf3 Key\cf1 ="MyButtonStyle">\cf4\par
            \cf1 <\cf2 Setter\cf3  Property\cf1 ="Height"\cf3  Value\cf1 ="30"/>\cf4\par
            \cf1 <\cf2 Setter\cf3  Property\cf1 ="Margin"\cf3  Value\cf1 ="0,0,0,10"/>\cf4\par
            \cf1 <\cf2 Setter\cf3  Property\cf1 ="Foreground"\cf3  Value\cf1 ="Sienna"></\cf2 Setter\cf1 >\cf4\par
            \cf1 <\cf2 Setter\cf3  Property\cf1 ="Background"\cf3  Value\cf1 ="Goldenrod"></\cf2 Setter\cf1 >\cf4\par
        \cf1 </\cf2 Style\cf1 >\cf4\par
    \cf1 </\cf2 UserControl.Resources\cf1 >\cf0\f0\fs28\par
\tab Na tom jestli je to window nebo userControl nezalezi.\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Ve sloupci kde chceme sablonu pouzit rekneme jen :\par

\pard\sa200\sl276\slmult1\tab\cf1\f1\fs22 <\cf2 DataGridTemplateColumn\cf3  Header\cf1 ="IsChecked"\cf3  CellTemplate\cf1 ="\{\cf2 StaticResource\cf3  CheckColumntemplate\cf1\}">\cf0\f0\par
\fs28\tab nebo:\par

\pard\li720\sa200\sl276\slmult1\cf1\f1\fs22 <\cf2 Button\cf3  Style\cf1 ="\{\cf2  StaticResource\cf3  MyButtonStyle\cf1  \}"\f2\lang1033  \cf3\f1 Content\cf1 ="\{\cf2 x\cf1 :\cf2 Static\cf3  gui\cf1 :\cf3 WpfUniverseGuiResources\cf1 .AddPlanetTitle\}"/>\fs19\par
\f2 content zase urcuje jazykove nastaveni , do stylu to uplne nepatri.\f1\lang9\par
\cf0\f0\fs28\par

\pard\sa200\sl276\slmult1\b\fs32\tab\fs40 Nastaveni Resources pro celou aplikaci  v App.xaml :\b0\fs28\par

\pard\sa200\sl240\slmult1\tab\cf1\f1\fs19 <\cf2 Application.Resources\cf1 >\cf4\par
        \cf1 <\cf2 Style\cf3  TargetType\cf1 ="Button" >\f2\lang1033                          \cf0\fs22 // Nastavujeme styl pro tlacitko\cf4\f1\fs19\lang9\par
            \cf1 <\cf2 Style.Triggers\cf1 >\f2\lang1033                                         \cf4\f1\lang9\par
                \cf1 <\cf2 Trigger\cf3  Property\cf1 ="IsEnabled"\cf3  Value\cf1 ="True">\f2\lang1033                       \cf0\fs22 // Definujeme co tento styl spousti (spoustec\b )\cf4\b0\f1\fs19\lang9\par
                    \cf1 <\cf2 Setter\cf3  Property\cf1 ="Background"\cf3  Value\cf1 ="BlueViolet"/>\cf4\par
                    \cf1 <\cf2 Setter\cf3  Property\cf1 ="Foreground"\cf3  Value\cf1 ="White"/>\cf4\par
                \cf1 </\cf2 Trigger\cf1 >\cf4\par
                \cf1 <\cf2 DataTrigger\cf3  Binding\cf1 ="\{\cf2 Binding\cf3  Path\cf1 =SelectedGalaxy\}"\cf3  Value\cf1 ="\{\cf2 x\cf1 :\cf2 Null\cf1\}">\f2\lang1033\tab\tab\tab\cf0\b\fs22  \b0 // DataTriger je spoustec podle objektu \cf4\f1\fs19\lang9\par
                    \cf1 <\cf2 Setter\cf3  Property\cf1 ="Background"\cf3  Value\cf1 ="Red"/>\cf4                  \par
                \cf1 </\cf2 DataTrigger\cf1 >\cf4\par
            \cf1 </\cf2 Style.Triggers\cf1 >\cf4\par

\pard\sa200\sl276\slmult1         \cf1 </\cf2 Style\cf1 >\cf4  \par
\f2\lang1033   \f1\lang9    \cf1 </\cf2 Application.Resources\cf1 >\par
\par
\cf0\f0\fs28\tab\b\fs44 Converters : \b0\fs28\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 V App.xaml si muzeme vytvorit tzv.  \b ControlTemplate\b0  . Slouzi k tomu , abychom si mohli urcite soucasti UI (UserInterface)  definovat jen jednou a potom je pouzivat na vice mistech.\b\par

\pard\sa200\sl276\slmult1\cf3\b0\f2\fs20\lang1033\tab\f1\lang9  \fs24 xmlns\cf1 :\cf3\ul\b converters\cf1\ulnone\b0 ="clr-namespace:WpfUniverse.Gui.Converters;assembly=WpfUniverse.Gui">\cf0\b\f0\fs28\par
\tab\cf4\b0\f1\fs19  \cf1 <\cf2\ul\b\fs24 converters\cf1\ulnone\b0 :\cf2 BoolToVisibilityConverter\cf3  x\cf1 :\cf3 Key\cf1 ="BoolToVisibilityConverter"/>\cf0\b\f0\fs28\par
\par

\pard\fi-360\li720\sa200\sl240\slmult1\cf1\b0\f2\fs19\lang1033\tab\f1\fs22\lang9 <\cf2 ControlTemplate\cf3  TargetType\cf1 ="ContentControl"\cf3  x\cf1 :\cf3 Key\cf1 ="DialogWindowTemplate">\f2\lang1033              \cf0\f0 //Definujeme tzv. ContenControl , budeme ji rikat DialogWindowTemplate\cf4\f3\lang9\par
\f1             \cf1 <\cf2 StackPanel\cf1 >\f2\lang1033\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab\tab    \cf0\f0 // Musime ji dat do nejakeho kontejneru napr stackPanelu\cf4\f1\lang9\par
                \cf1 <\cf2 Border\cf3  BorderThickness\cf1 ="1"\cf3  BorderBrush\cf1 ="Red"\par
\f2\lang1033\tab\tab\tab\tab\cf3\ul\b\f1\lang9  Visibility\cf1 ="\{\cf2 Binding\cf3  Path\cf1 =IsValid,\cf3  Converter\cf1 =\{\cf2 StaticResource\cf3  BoolToVisibilityConverter\cf1\}\}">\f2\lang1033  \cf0\ulnone\b0\f0 // \b Bindujeme na boolean , potrebujeme ale prevod na visibilitu \b0 ***\cf4\f1\lang9\par
                    \f2\lang1033   \cf1\f1\lang9 <\cf2 TextBlock\cf3  Text\cf1 ="\{\cf2 Binding\cf3  Path\cf1 =Error\}"/>\f2\lang1033                \cf0 // Vypis ErrorStringu do textBlocku\cf4\f1\lang9\par
                \cf1 </\cf2 Border\cf1 >\cf4\par
            \par
                \cf1 <\cf2 ContentPresenter\cf1  />\f2\lang1033                    \cf0 // TOHLE RIKA ZE NASLEDUJE DALSI OBSAH DEFINOVANY V    \cf3 ContentControl   \cf0 DIALOGOVEHO OKNA\b  \cf4\b0\f1\lang9\par
            \cf1 </\cf2 StackPanel\cf1 >\cf4\par

\pard\sa200\sl240\slmult1\f2\lang1033\tab\cf1\f1\lang9 </\cf2 ControlTemplate\cf1 >\cf0\b\f0\par

\pard\sa200\sl276\slmult1\b0\fs28\par
\tab\b *** \b0 Prevod na visibilitu probiha pomoci tzv\fs44 .  \b\fs32 Converteru\fs44  \fs28 . \b0  Implementuje IValueConverter, prevezme dve metody z rozhrani  . Metoda \b Convert \b0 funguje ve \tab smeru z view do viewModelu  a metoda \b ConvertBack \b0 z \tab viewModelu do view . Ta \tab se moc nepouziva. Metode timto predame boolean IsValid a vrati nam \tab visibilitu .  Boolean  true - vraci  Visibility.Collapsed,      false - Visibility.Visible. \b\par
\b0\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 V dialogovem okne ktere chce pouzivat ControlTemplate z app.xaml,  rekneme ze : \par

\pard\sa200\sl276\slmult1\tab\cf1\f1\fs22 <\cf2 ContentControl\cf3  Template\cf1 ="\{\cf2 StaticResource\cf3  DialogWindowTemplate\cf1\}">\par
\f2\lang1033\tab\tab < \cf0 Tady bude normalne kod ktery se bude zobrazovat po DialogWindowTemplatu.  ( Klasika gridy , texboxy ... ) >\cf1\f1\lang9\par
\f2\lang1033\tab\f1 </\cf2 ContentControl\cf1 >\par
\par
\cf0\f0\fs28\lang9\tab\b\fs40 Vyber hlavniho stylu kdyz jich je vic pro jednu komponentu:\b0\fs28\par
\tab Pokud \ul nedefinujeme nazev \ulnone pouzije se styl z \ul app.xaml \ulnone . Pokud je pro komponentu stylu vic musime pouzivat nazvy a ve volani \{StaticResource JmenoStylu\}, \tab nebo vybereme hlavni styl ktery se bude pouzivat v cele aplikaci :\par
  \tab\cf1\f1\fs22 <\cf2 Style\cf3  TargetType\cf1 ="Button"\cf3  BasedOn\cf1 ="\{\cf2 StaticResource\cf3  ButtonStyle\cf1\}"/>\cf0\f0\fs36     \par
\fs28\tab Pro pouziti jineho stylu proste v miste kde chceme mit jinej styl zavolame \{StaticResource  JmenoStylu\}\par
\par
 \fs22\tab\par
\fs28 ===========================================================================================================================\par
\b\fs44\tab x: Key \b0\fs28\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b    \b0 je zalezitost ze tridy Dictionary .  Timto definujeme co je ve slovniku klic . :\par

\pard\sa200\sl276\slmult1\fs22\tab\cf1\f1\fs19 <\cf2 Window.Resources\cf1 >\cf4\par
        \cf1 <\cf2 DataTemplate\cf3  x\cf1 :\cf3 Key\cf1 ="CheckColumntemplate">\f2\lang1033        \cf0\b\f0\fs22 // toto je klic \cf4\b0\f1\fs19\lang9\par
            \cf1 <\cf2 CheckBox\cf3  IsChecked\cf1 ="\{\cf2 Binding\cf3  IsChecked\cf1 ,\cf3  UpdateSourceTrigger\cf1 =PropertyChanged\}"/>\f2\lang1033        \cf0\b\f0\fs22 // a toto value\cf4\b0\f1\fs19\lang9\par
        \cf1 </\cf2 DataTemplate\cf1 >\cf4\par
    \cf1 </\cf2 Window.Resources\cf1 >\cf0\f0\fs22\par
\fs28\tab a nasledne v kodu xaml muzeme zavolat podle klice  : \par
\cf1\f2\fs19\lang1033\tab\f1\lang9 <\cf2 DataGridTemplateColumn\cf3  Header\cf1 ="IsChecked"\cf3  CellTemplate\cf1 ="\{\cf2 StaticResource\cf3  CheckColumntemplate\cf1\}">\par
\par
\par
\cf0\b\f0\fs28\lang1033\tab Sloupce dataGridu\b0\lang9\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\lang1033 V xaml nastavime \cf3\f1\fs19 AutoGenerateColumns\cf1 ="False"\cf0\f0\fs28  C \lang9\par

\pard\sa200\sl276\slmult1\par
\tab\b\fs44 Key InputBinding \par
\fs56\tab\cf1\b0\f1\fs24 <\cf2 Window.InputBindings\cf1 >\cf4\par
        \cf1 <\cf2 KeyBinding\cf3  Key\cf1 ="Escape"\cf3  Command\cf1 ="\{\cf2 Binding\cf3  Path\cf1 =StornoGalaxyCommand\}"/>\cf4\par
   \f2\lang1033   \f1\lang9  \cf1 </\cf2 Window.InputBindings\cf1 >\cf0\f0\fs40\par
\fs28\tab Reagovani okna pripadne nejakeho controlu na eventy z klavesnice . Tady zavirani okna escapem\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
.\fs22\par
}
 