{\rtf1\ansi\ansicpg1250\deff0\nouicompat\deflang1029{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Consolas;}{\f2\fnil\fcharset0 Consolas;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;\red163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;\red43\green145\blue175;\red0\green128\blue0;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs48\lang9 CALIBURN\fs28\par
\b0\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Caliburn potrebuje pro kazde view mit viewModel.   Nas MainWindow ho zatim nema , vytvorime si teda tridu MainViewModel.   Jeho view se bude jmenovat MainView. \par

\pard\sa200\sl276\slmult1\par
\b\tab Trida MainViewModel : Screen\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Ma readonly Vlastnosti v podobe viewModelu  , z jejihz \ul view\ulnone  se sklada \ul mainView.\par

\pard\sa200\sl276\slmult1\par
\ulnone\b\tab Trida MainView  ( xaml cast )\ul\b0\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\ulnone V MainView je potreba nastavit datacontexty :     \cf1\f1\fs19 <\cf2\fs22 views\cf1 :\cf2 GalaxyView\cf3  DataContext\cf1 ="\{\cf2 Binding\cf3  Path\cf1 =GalaxyViewModel\}" />\f2\lang1033   \cf0\f0\fs28\lang9\par

\pard\sa200\sl276\slmult1\lang1033\tab Pokud se nechce zobrazit je potreba zkontrolovat \b spravnost nazvu \b0 (do xaml se da napsat cokoli :D _)\lang9\par
\tab Datacontexty pro dialogove okna se nenastavuji . ( Myslim (Caliburn to udela sam) ).\par
\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Caliburn  potrebuje mit vsechny view ve slozce Views  a vsechny viewModely ve slozce ViewModels, jinak  ty tridy proste nenajde.\par
{\pntext\f3\'B7\tab}Do codebehindu uz se nepise nic zmizi i to co tam bylo doted  ( nastavovani datacontextu atd.) Zustava tam jen InitializeComponent.\par
{\pntext\f3\'B7\tab}Je potreba si uvedomit ze vsechny View cka  vznikaji a existuji  hned po startu aplikace . \par

\pard\sa200\sl276\slmult1\tab  Samotne zobrazeni ( napr. u dialogovych oken ) probiha pomoci inicializacnich metod ktere se volaji v metodach kde je potreba vyvolat dialogove okno. Po volani inicializacni metody nasleduje uz jen \tab ShowDialog ().\par
\par
\par
\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Budeme mit novou tridu \b AppBootstraper : Bootstraper< MainViewModel\b0 > \par
{\pntext\f3\'B7\tab}Ma nekolik metod ktere nastavuji caliburn , zmizel staticky WindsorContainer, je tu metoda \b InitializeContainer\b0  ktera nam vytvori  container a zaregistruje nam vsechny tridy z assembly , ve ktere se nachazi Installer,  vcetne Installeru samotneho .  ( Installer je trida ve slozce Installers )  a vyresi vsechny dao objekty\par
{\pntext\f3\'B7\tab}Metoda \b OnStartup\b0  vola  prave metodu InitializeContainer,   resolvne nam   \ul windowManagera\ulnone\b    \b0  , nastavi jako korenovy viewModel  MainViewModel (misto ze ktereho aplikace zacina ). Spusti okno : \par

\pard\sa200\sl276\slmult1\tab\cf4\f1\fs22 windowManager.ShowDialog(rootViewModel);\cf0\f0\fs28\par
\tab  a zajisti konec aplikace po zavreni dialogoveho okna ( v tomto pripade je okno cela aplikace). \par
\tab\cf4\f1\fs22 Application.Shutdown();\cf0\f0\fs28\par
\par
\tab\b Trida Installer : IWindowInstaller\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Neni na ni zadna reference o jeji  vytvoreni se totiz stara Castle.  Tohle je podobny castle jak ho znam , rika se tu ze entity jsou ve slozce kde je Galaxie,  atd .  viz poznamky  ke CastleWindsor.\par
{\pntext\f3\'B7\tab}Probiha tu registrace ViewModelu\par

\pard\sa200\sl276\slmult1\par
\par
\tab\b Vyvolani dialogoveho okna \par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Rekneme , ze chceme z GalaxyViewModelu vyvolat dialogove okno GalaxyDialogWindow. \par
{\pntext\f3\'B7\tab}Dialogove okno potrebujeme vytvorit na objektu GalaxyDialogViewModel. \par
{\pntext\f3\'B7\tab}Pridame si teda do konstruktoru GalaxyViewModelu , zavislost na GalaxyDialogViewModel, Castle se postara o instanci. \par
{\pntext\f3\'B7\tab}Predame v konstruktoru hodnotu na privatni promennou m_galaxyDialogViewModel  .\par
{\pntext\f3\'B7\tab}A na ni budeme volat inicializacni metodu , ktera je ve tride GalaxyDialogViewModel. Pritom ji predame potrebne zavislosti.\par

\pard\sa200\sl276\slmult1\tab\cf4\f1\fs22 m_model.Initialize(SelectedGalaxy,\cf1 null\cf4 ); \cf0\f0\fs28\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Zbyva zavolat \par

\pard\sa200\sl276\slmult1\tab\cf4\f1\fs22 m_windowManager.ShowDialog(m_model);\f2\lang1033                   Instanci window manageru mame v konstruktoru jako zavislost a castle nam ji vytvori.\par
\par
\cf0\f0\lang9\par
\fs28\tab\b Inicializacni metoda\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Slouzi na predavani zavislosti.  Predani zavislosti ktere byly puvodne v konstruktoru se nyni presune do metody.  Caliburn vyrabi vsechny okna hned po startu a kdyz je potreba tak je jenom zobrazuje. Pokud neurcime ve tride Installer pri registraci do Castle containeru, ze bude LifeStyle.Transient,    bude nastaven zivotni cyklust jako  \b Singleton \b0 tj. jedina instance bude zobrazovana porad.   Tento pripad neni vhodny pokud chceme jedno okno zobrazovat vicekrat . V takovem pripade by nam uprava v jednom okne upravovala i druhe okno protoze se jedna o jeden objekt.\par

\pard\sa200\sl276\slmult1\tab\cf1\f1\fs19 public\cf4  \cf1 void\cf4  Initialize(\cf5 GalaxyDataContract\cf4  galaxy, \cf5 IDialogWindow\cf4  dialogWindow)\f2\lang1033  \{\f1\lang9\par
            m_galaxy = galaxy;\par
            m_dialogWindow = dialogWindow;\par
        \}\cf0\f0\fs28\par
\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b Zavirani oken\b0\par
{\pntext\f3\'B7\tab}Trida ErrorBase ted bude dedit od \b Screen\b0  .  Tato trida uz implementuje rozhrani INotifyPropertyChanged, takze uz nemusime dedit od ViewModelBase. Zaroveni implementuje metodu close ktera zavira  dialogove okna.\par
{\pntext\f3\'B7\tab}Dialogove okna dedi od ErrorBase protoze je v ni i validace . Jinak se dedi od ViewModelBase nebo od Screen.\par
{\pntext\f3\'B7\tab}Trida ViewModelBase se taky zmenila , ted bude dedit od \b PropertyChangedBase\b0 . Tim se meni volani metody, Caliburn pouziva pro notifikaci  volani      Notify\b Of\b0 PropertyChanged (nameof(neco));\par
{\pntext\f3\'B7\tab}Samotne zavreni se provadi pomoci metody \b TryClose().  \b0 Ta muze mit i parametr typu boolean.  V miste volani metody muzeme i reagovat na navratovou hodnotu typu boolean:\par
{\pntext\f3\'B7\tab}\cf1\f1\fs19 if\cf4  (m_windowManager.ShowDialog(m_model) == \cf1 true\cf4 ) \cf6 // pokud metoda tryclose vrati true\cf0\f0\fs28\par
{\pntext\f3\'B7\tab}Caliburn resi okna v multithreadingu . Normalne je mozne zavirat okna jen v hlavnim vlakne . Zavreni ve vedlejsich vlaknech zpusobuje deadLocky.  Caliburn nas od tohoto problemu odstinuje.\par

\pard\sa200\sl276\slmult1\par
\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Caliburn pouziva misto ObservableCollection \b BindableCollection<>\b0\par

\pard\sa200\sl276\slmult1\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
.\fs22\par
}
 